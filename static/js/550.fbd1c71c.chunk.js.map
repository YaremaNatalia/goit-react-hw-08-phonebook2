{"version":3,"file":"static/js/550.fbd1c71c.chunk.js","mappings":"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","sources":["components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","pages/ContactsPage.jsx","pages/RegisterPage.styled.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormGroup = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  padding: 20px 0;\n  width: 520px;\n`;\n\nexport const FormLabel = styled.label`\n  display: block;\n  margin-bottom: 10px;\n  font-weight: bold;\n  color: #fff;\n`;\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Input } from 'antd';\n\nimport { selectFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/contactsReducer';\nimport { FormGroup, FormLabel } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <FormGroup>\n      <FormLabel>\n        <p>Find contacts by name or phone number:</p>\n        <Input\n          type=\"text\"\n          placeholder=\"Enter letters or digits to filter your contacts\"\n          value={filter}\n          onChange={onFilterChange}\n          required\n        />\n      </FormLabel>\n    </FormGroup>\n  );\n};\n","import styled from 'styled-components';\n\n\nexport const ContactUl = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto 20px;\n  background-color: #fff;\n  border: 1px solid #000;\n  border-radius: 12px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  padding: 20px;\n  width: 480px;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n`;\n\nexport const ContactName = styled.p`\n  font-weight: bold;\n`;\n\nexport const ContactNumber = styled.p`\n  color: #555555;\n`;\n\nexport const RemoveBtn = styled.ul`\n  background-color: #cac6c6;\n  color: #000;\n  border: none;\n  border-radius: 4px;\n  padding: 4px 8px;\n  cursor: pointer;\n  font-size: 12px;\n  &:hover,\n  &:focus {\n    background-color: #ff0000;\n    color: #fff;\n  }\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contactsServices';\nimport { selectFilteredContacts } from 'redux/selectors';\nimport {\n  ContactItem,\n  ContactName,\n  ContactNumber,\n  ContactUl,\n  RemoveBtn,\n} from './ContactList.styled';\nimport { FormTitle } from 'pages/RegisterPage.styled';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n  };\n  return (\n    <div>\n      <FormTitle>Your contacts</FormTitle>\n      <ContactUl>\n        {filteredContacts.map(contact => {\n          return (\n            <ContactItem key={contact.id}>\n              <ContactName>{contact.name}</ContactName>\n              <ContactNumber>{contact.number}</ContactNumber>\n              <RemoveBtn\n                onClick={() => handleDeleteContact(contact.id)}\n                type=\"button\"\n                aria-label=\"Delete contact\"\n              >\n                &times;\n              </RemoveBtn>\n            </ContactItem>\n          );\n        })}\n      </ContactUl>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { Button, Form, Input } from 'antd';\nimport { selectUserContacts } from 'redux/selectors';\nimport { addContactThunk } from 'redux/contactsServices';\nimport { FormWrapper } from 'pages/RegisterPage.styled';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectUserContacts);\n\n  const dispatch = useDispatch();\n\n  const [form] = Form.useForm();\n\n  const onFinish = values => {\n    const { name, number } = values;\n    const contactData = {\n      name,\n      number: number.replace(/[\\s()-]+/g, ''),\n    };\n\n    const isDuplicateName = contacts.some(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n    );\n    if (isDuplicateName) {\n      form.resetFields();\n      return Notiflix.Notify.failure(\n        `Contact with name ${name} or phone number ${number} is already in contacts!`\n      );\n    }\n\n    console.log('Success:', contactData);\n    dispatch(addContactThunk(contactData));\n    form.resetFields();\n  };\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <div>\n      <FormWrapper>\n        <Form\n          form={form}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          name=\"wrap\"\n          labelCol={{\n            flex: '110px',\n          }}\n          labelAlign=\"left\"\n          labelWrap\n          wrapperCol={{\n            flex: 1,\n          }}\n          colon={false}\n          style={{\n            maxWidth: 600,\n          }}\n          initialValues={{\n            name: '',\n            number: '',\n          }}\n        >\n          <Form.Item\n            label=\"Name\"\n            name=\"name\"\n            id=\"name\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input\n              type=\"text\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Charles de Batz de Castelmore d'Artagnan\"\n              placeholder=\"Enter contact name\"\n              required\n            />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Phone\"\n            name=\"number\"\n            id=\"number\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input\n              type=\"text\"\n              name=\"number\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              placeholder=\"Enter contact phone number\"\n              required\n            />\n          </Form.Item>\n\n          <Form.Item label=\" \">\n            <Button type=\"primary\" htmlType=\"submit\">\n              Add contact\n            </Button>\n          </Form.Item>\n        </Form>\n      </FormWrapper>\n      ;\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectContactsError,\n  selectContactsIsloading,\n  selectUserContacts,\n} from 'redux/selectors';\nimport { requestContactsThunk } from 'redux/contactsServices';\nimport { Loader } from 'components/Loader';\nimport { FormContainer, FormTitle } from './RegisterPage.styled';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectUserContacts);\n  const isLoading = useSelector(selectContactsIsloading);\n  const error = useSelector(selectContactsError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(requestContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && (\n        <p className=\"errorMessage\">Whoops, something went wrong: {error}</p>\n      )}\n      <section>\n        <FormContainer>\n          <FormTitle>Add new contact</FormTitle>\n          <ContactForm />\n          {contacts && contacts.length > 0 && <Filter />}\n          {contacts && contacts.length > 0 && <ContactList />}\n        </FormContainer>\n      </section>\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  padding: 30px;\n  width: 100vw;\n  height: 100vh;\n`;\nexport const FormWrapper = styled.div`\n  margin: 0 auto 20px;\n  background-color: #fff;\n  border: 1px solid #000;\n  border-radius: 12px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  padding: 20px;\n  width: 480px;\n`;\n\nexport const FormTitle = styled.h2`\n  text-align: center;\n  font-size: 20px;\n  margin-bottom: 10px;\n  color: #fff;\n`;\n\n\n"],"names":["FormGroup","styled","FormLabel","Filter","filter","useSelector","selectFilter","dispatch","useDispatch","type","placeholder","value","onChange","event","setFilter","target","required","ContactUl","ContactItem","ContactName","ContactNumber","RemoveBtn","ContactList","filteredContacts","selectFilteredContacts","map","contact","name","number","onClick","contactId","id","deleteContactThunk","ContactForm","contacts","selectUserContacts","Form","form","onFinish","values","contactData","replace","some","toLowerCase","resetFields","Notiflix","console","log","addContactThunk","onFinishFailed","errorInfo","labelCol","flex","labelAlign","labelWrap","wrapperCol","colon","style","maxWidth","initialValues","label","rules","title","htmlType","isLoading","selectContactsIsloading","error","selectContactsError","useEffect","requestContactsThunk","Loader","className","length","FormContainer","FormWrapper","FormTitle"],"sourceRoot":""}